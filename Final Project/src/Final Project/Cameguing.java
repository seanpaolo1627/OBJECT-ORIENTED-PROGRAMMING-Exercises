/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package cameguing;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ASUS
 */
public class Cameguing extends javax.swing.JFrame {


    // JDBC URL, username, and password of MySQL server
    private static final String URL = "jdbc:mysql://localhost:3306/javadbexam";
    private static final String USER = "root";
    private static final String PWD = "root";

    private static final String DATABASE_NAME = "javadbexam";

    private static boolean addProduct_Atleast_OneItem_Added = false; // For enabling the 'Update Product' and 'Stock In' Sections when the system has at least one item being added to it
    private static boolean ProductsTable_Atleast_OneItem_AvailableStock = false; // For only enabling the 'Create Order' Section when the system has at least one item that has stock
    private static boolean addOrder_Atleast_OneItem_Ordered = false; // For enabling the 'Grand Total' Text Field and 'Complete Order' Button when the system has at least one item being ordered to it
    private static boolean createOrder_Customer_StillOrdering = false; // For only enabling the 'Create Order' Section when the customer is done ordering
    
    // JDBC variables for opening, closing and managing connection
    private static Connection connection;

    public Cameguing() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        addProduct_ProductName_txtFld = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        addProduct_Price_txtFld = new javax.swing.JTextField();
        addProduct_Button = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        updateProduct_ProductName_txtFld = new javax.swing.JTextField();
        updateProduct_Button = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        updateProduct_Price_txtFld = new javax.swing.JTextField();
        updateProduct_ProductID_comboBox = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        stockIn_Quantity_txtFld = new javax.swing.JTextField();
        stockIn_Button = new javax.swing.JButton();
        stockIn_ProductID_comboBox = new javax.swing.JComboBox<>();
        jSeparator3 = new javax.swing.JSeparator();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        orderTable = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        productsTable = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        orderDetailsTable = new javax.swing.JTable();
        jLabel11 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        createOrder_CustomerName_txtFld = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        createOrder_OrderDate_txtFld = new javax.swing.JTextField();
        createOrder_Button = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        AutoDate_ToggleButton = new javax.swing.JToggleButton();
        jPanel8 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        addOrderItem_Button = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        addOrder_Quantity_txtFld = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        addOrder_GrandTotal_DisplayOnly_txtFld = new javax.swing.JTextField();
        jSeparator5 = new javax.swing.JSeparator();
        addOrder_CompleteOrder_Button = new javax.swing.JButton();
        addOrder_ProductID_comboBox = new javax.swing.JComboBox<>();
        addOrder_OrderID_comboBox = new javax.swing.JComboBox<>();
        viewOrders_Button = new javax.swing.JButton();
        resetDatabase_Button = new javax.swing.JButton();
        NoticePanel_DisplayMsg_WithButton = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        viewEmptyStocks = new javax.swing.JButton();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jSeparator6 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("POINT OF SALE (POS) SYSTEM");

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel2.setText("Product Name:");

        addProduct_ProductName_txtFld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addProduct_ProductName_txtFldActionPerformed(evt);
            }
        });

        jLabel4.setText("Price:");

        addProduct_Price_txtFld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addProduct_Price_txtFldActionPerformed(evt);
            }
        });

        addProduct_Button.setText("Add Product");
        addProduct_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addProduct_ButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(addProduct_Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addProduct_ProductName_txtFld)
                            .addComponent(addProduct_Price_txtFld))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(addProduct_ProductName_txtFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(addProduct_Price_txtFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(addProduct_Button)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel3.setText("Product ID:");

        jLabel5.setText("Updated Product Name:");

        updateProduct_ProductName_txtFld.setEnabled(false);
        updateProduct_ProductName_txtFld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateProduct_ProductName_txtFldActionPerformed(evt);
            }
        });

        updateProduct_Button.setText("Update Product");
        updateProduct_Button.setEnabled(false);
        updateProduct_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateProduct_ButtonActionPerformed(evt);
            }
        });

        jLabel6.setText("Updated Price:");

        updateProduct_Price_txtFld.setEnabled(false);
        updateProduct_Price_txtFld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateProduct_Price_txtFldActionPerformed(evt);
            }
        });

        updateProduct_ProductID_comboBox.setEnabled(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(updateProduct_Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(updateProduct_Price_txtFld)
                            .addComponent(updateProduct_ProductID_comboBox, 0, 163, Short.MAX_VALUE)
                            .addComponent(updateProduct_ProductName_txtFld))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(updateProduct_ProductID_comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(updateProduct_ProductName_txtFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(updateProduct_Price_txtFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(updateProduct_Button)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel7.setText("Stock In Product ID:");

        jLabel8.setText("Quantity:");

        stockIn_Quantity_txtFld.setEnabled(false);
        stockIn_Quantity_txtFld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stockIn_Quantity_txtFldActionPerformed(evt);
            }
        });

        stockIn_Button.setText("Stock In");
        stockIn_Button.setEnabled(false);
        stockIn_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stockIn_ButtonActionPerformed(evt);
            }
        });

        stockIn_ProductID_comboBox.setEnabled(false);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(stockIn_Quantity_txtFld)
                            .addComponent(stockIn_ProductID_comboBox, 0, 188, Short.MAX_VALUE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(stockIn_Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(stockIn_ProductID_comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(stockIn_Quantity_txtFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(stockIn_Button)
                .addContainerGap())
        );

        jSeparator3.setBackground(new java.awt.Color(102, 102, 102));
        jSeparator3.setForeground(new java.awt.Color(102, 102, 102));
        jSeparator3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jSeparator3.setOpaque(true);

        jPanel4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        orderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order ID", "Customer Name", "Order Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(orderTable);

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("TABLE OF ORDERS");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 451, Short.MAX_VALUE)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        productsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product ID", "Product Name", "Product Price", "Available Stocks"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(productsTable);

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("TABLE OF PRODUCTS");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 512, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        orderDetailsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order ID", "Product ID", "Product Name", "Product Price", "Quantity Ordered", "Subtotal"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(orderDetailsTable);

        jLabel11.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("TABLE OF ORDER DETAILS");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane5)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel12.setText("Customer Name:");

        createOrder_CustomerName_txtFld.setEnabled(false);
        createOrder_CustomerName_txtFld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createOrder_CustomerName_txtFldActionPerformed(evt);
            }
        });

        jLabel13.setText("Order Date:");

        createOrder_OrderDate_txtFld.setEnabled(false);
        createOrder_OrderDate_txtFld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createOrder_OrderDate_txtFldActionPerformed(evt);
            }
        });

        createOrder_Button.setText("Create Order");
        createOrder_Button.setEnabled(false);
        createOrder_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createOrder_ButtonActionPerformed(evt);
            }
        });

        jLabel1.setForeground(new java.awt.Color(102, 102, 102));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Format: yyyy-mm-dd hh:mm:ss");

        AutoDate_ToggleButton.setText("Auto Date Toggle");
        AutoDate_ToggleButton.setEnabled(false);
        AutoDate_ToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AutoDate_ToggleButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE)
                            .addComponent(createOrder_CustomerName_txtFld)
                            .addComponent(createOrder_OrderDate_txtFld)))
                    .addComponent(createOrder_Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(AutoDate_ToggleButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(createOrder_CustomerName_txtFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(createOrder_OrderDate_txtFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AutoDate_ToggleButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addComponent(createOrder_Button)
                .addContainerGap())
        );

        jPanel8.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel14.setText("Order ID:");

        jLabel15.setText("Product ID:");

        addOrderItem_Button.setText("Add Order Item");
        addOrderItem_Button.setEnabled(false);
        addOrderItem_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addOrderItem_ButtonActionPerformed(evt);
            }
        });

        jLabel16.setText("Quantity:");

        addOrder_Quantity_txtFld.setEnabled(false);
        addOrder_Quantity_txtFld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addOrder_Quantity_txtFldActionPerformed(evt);
            }
        });

        jLabel17.setText("Grand Total:");

        addOrder_GrandTotal_DisplayOnly_txtFld.setEditable(false);
        addOrder_GrandTotal_DisplayOnly_txtFld.setEnabled(false);
        addOrder_GrandTotal_DisplayOnly_txtFld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addOrder_GrandTotal_DisplayOnly_txtFldActionPerformed(evt);
            }
        });

        jSeparator5.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator5.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        addOrder_CompleteOrder_Button.setText("Complete Order");
        addOrder_CompleteOrder_Button.setEnabled(false);
        addOrder_CompleteOrder_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addOrder_CompleteOrder_ButtonActionPerformed(evt);
            }
        });

        addOrder_ProductID_comboBox.setEnabled(false);

        addOrder_OrderID_comboBox.setEnabled(false);

        viewOrders_Button.setText("View Orders");
        viewOrders_Button.setEnabled(false);
        viewOrders_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewOrders_ButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, 64, Short.MAX_VALUE)
                            .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(addOrder_ProductID_comboBox, 0, 216, Short.MAX_VALUE)
                            .addComponent(addOrder_Quantity_txtFld)
                            .addComponent(addOrder_OrderID_comboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(addOrderItem_Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewOrders_Button)
                .addGap(34, 34, 34)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addOrder_GrandTotal_DisplayOnly_txtFld, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addOrder_CompleteOrder_Button, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addGap(34, 34, 34)))
                .addGap(27, 27, 27))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator5)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(addOrder_OrderID_comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(viewOrders_Button))
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addOrder_ProductID_comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel16)
                            .addComponent(addOrder_Quantity_txtFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addComponent(addOrderItem_Button))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addOrder_GrandTotal_DisplayOnly_txtFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addOrder_CompleteOrder_Button)))
                .addContainerGap())
        );

        resetDatabase_Button.setBackground(new java.awt.Color(204, 0, 0));
        resetDatabase_Button.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        resetDatabase_Button.setForeground(new java.awt.Color(51, 0, 0));
        resetDatabase_Button.setText("RESET DATABASE");
        resetDatabase_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetDatabase_ButtonActionPerformed(evt);
            }
        });

        NoticePanel_DisplayMsg_WithButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.red, java.awt.Color.red, java.awt.Color.red, java.awt.Color.red));

        jLabel18.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 0, 0));
        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel18.setText("!!!   NOTICE   !!!");

        jLabel19.setForeground(new java.awt.Color(204, 0, 0));
        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel19.setText("There are product(s) in the");

        viewEmptyStocks.setText("View Empty Stocks");
        viewEmptyStocks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewEmptyStocksActionPerformed(evt);
            }
        });

        jLabel22.setForeground(new java.awt.Color(204, 0, 0));
        jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel22.setText("database system with");

        jLabel23.setForeground(new java.awt.Color(204, 0, 0));
        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel23.setText("no available stock!");

        jLabel24.setForeground(new java.awt.Color(204, 0, 0));
        jLabel24.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel24.setText("'Stock In' some products!");

        javax.swing.GroupLayout NoticePanel_DisplayMsg_WithButtonLayout = new javax.swing.GroupLayout(NoticePanel_DisplayMsg_WithButton);
        NoticePanel_DisplayMsg_WithButton.setLayout(NoticePanel_DisplayMsg_WithButtonLayout);
        NoticePanel_DisplayMsg_WithButtonLayout.setHorizontalGroup(
            NoticePanel_DisplayMsg_WithButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(NoticePanel_DisplayMsg_WithButtonLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(NoticePanel_DisplayMsg_WithButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(viewEmptyStocks, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                    .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(NoticePanel_DisplayMsg_WithButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(NoticePanel_DisplayMsg_WithButtonLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel22, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                    .addContainerGap()))
            .addGroup(NoticePanel_DisplayMsg_WithButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(NoticePanel_DisplayMsg_WithButtonLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel23, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        NoticePanel_DisplayMsg_WithButtonLayout.setVerticalGroup(
            NoticePanel_DisplayMsg_WithButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NoticePanel_DisplayMsg_WithButtonLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(viewEmptyStocks)
                .addContainerGap())
            .addGroup(NoticePanel_DisplayMsg_WithButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(NoticePanel_DisplayMsg_WithButtonLayout.createSequentialGroup()
                    .addGap(38, 38, 38)
                    .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(79, Short.MAX_VALUE)))
            .addGroup(NoticePanel_DisplayMsg_WithButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(NoticePanel_DisplayMsg_WithButtonLayout.createSequentialGroup()
                    .addGap(48, 48, 48)
                    .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(69, Short.MAX_VALUE)))
        );

        jSeparator6.setBackground(new java.awt.Color(102, 102, 102));
        jSeparator6.setForeground(new java.awt.Color(102, 102, 102));
        jSeparator6.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jSeparator6.setOpaque(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(30, 30, 30)
                        .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGap(18, 18, 18)
                            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(47, 47, 47)
                                    .addComponent(NoticePanel_DisplayMsg_WithButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addGap(18, 30, Short.MAX_VALUE)
                .addComponent(resetDatabase_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(NoticePanel_DisplayMsg_WithButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 33, Short.MAX_VALUE)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(resetDatabase_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1))
                            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addProduct_ProductName_txtFldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addProduct_ProductName_txtFldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addProduct_ProductName_txtFldActionPerformed

    private void addProduct_Price_txtFldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addProduct_Price_txtFldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addProduct_Price_txtFldActionPerformed

    private void addProduct_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addProduct_ButtonActionPerformed
        try (Connection connection = establishConnection()) {

            double price = 0.0;

            // Get data from text fields
            String productName = addProduct_ProductName_txtFld.getText().trim();
            String price_Str = addProduct_Price_txtFld.getText().trim();

            // Check if any of the required fields is empty
            if (productName.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please fill in the 'Product Name' text field.");
                return;  // Stop further processing if fields are empty
            }

            // Check for duplicate entry
            if (addProduct_isDuplicateEntry(productName)) {
                return;
            }

            // Check if any of the required fields is empty
            if (price_Str.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please fill in the 'price' text field.");
                return;  // Stop further processing if 'quantity' text field are empty
            }

            try {
                price = Double.valueOf(price_Str);
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "Please fill in the 'price' text field with a valid double.");
                return;
            }

            // Check if any of the required fields is empty
            if (price == 0.0) {
                JOptionPane.showMessageDialog(this, "The 'price' to set cannot be 0.");
                return;  // Stop further processing if 'quantity' text field are empty
            }

            String addProductQuery = "INSERT INTO products (name, price) VALUES (?, ?)";
            String createEmptyStockQuery = "INSERT INTO stock (products_id, quantity) VALUES (?, 0)";

            try (PreparedStatement addProductStatement = connection.prepareStatement(addProductQuery, Statement.RETURN_GENERATED_KEYS); PreparedStatement insertStockStatement = connection.prepareStatement(createEmptyStockQuery)) {

                // Set parameters in the prepared statement for product insertion
                addProductStatement.setString(1, productName);
                addProductStatement.setDouble(2, price);

                // Execute the product insert statement and retrieve the auto-generated product ID
                int affectedRows = addProductStatement.executeUpdate();
                if (affectedRows == 0) {
                    throw new SQLException("Creating product failed, no rows affected.");
                }

                try (ResultSet generatedKeys = addProductStatement.getGeneratedKeys()) {
                    if (generatedKeys.next()) {
                        int productId = generatedKeys.getInt(1);

                        // Set parameters in the prepared statement for stock insertion
                        insertStockStatement.setInt(1, productId);

                        // Execute the stock insert statement
                        insertStockStatement.executeUpdate();
                    } else {
                        throw new SQLException("Creating product failed, no ID obtained.");
                    }
                }

                resetTextFields();
                reloadProductsTable();
                ProductIDComboBoxes_Adding_ProductIDs_ProductNames();

            }
        } catch (SQLException ex) {
            Logger.getLogger(Cameguing.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Cameguing.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_addProduct_ButtonActionPerformed

    private void updateProduct_ProductID_txtFldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateProduct_ProductID_txtFldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_updateProduct_ProductID_txtFldActionPerformed

    private void updateProduct_ProductName_txtFldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateProduct_ProductName_txtFldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_updateProduct_ProductName_txtFldActionPerformed

    private void updateProduct_Price_txtFldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateProduct_Price_txtFldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_updateProduct_Price_txtFldActionPerformed

    private void updateProduct_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateProduct_ButtonActionPerformed
        try (Connection connection = establishConnection()) {

            int productID_toUpdate = 0;
            double updatedPrice = 0;

            // Get data from text fields
            productID_toUpdate = updateProduct_ProductID_comboBox.getSelectedIndex();
            String updatedProductName = updateProduct_ProductName_txtFld.getText().trim();
            String updatedPrice_Str = updateProduct_Price_txtFld.getText().trim();

            // Check if the user selected an ID
            if (productID_toUpdate == 0) {
                JOptionPane.showMessageDialog(this, "Please select a Product ID.");
                return;  // Stop further processing if fields are empty
            }

            // Check if any of the required fields is empty
            if (updatedProductName.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please fill in the 'Updated Product Name' text field.");
                return;  // Stop further processing if fields are empty
            }

            // Check if any of the required fields is empty
            if (updatedPrice_Str.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please fill in the 'price' text field.");
                return;  // Stop further processing if 'quantity' text field are empty
            }

            try {
                updatedPrice = Double.valueOf(updatedPrice_Str);
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "Please fill in the 'price' text field with a valid double");
                return;
            }

            // Check if any of the required fields is empty
            if (updatedPrice == 0.0) {
                JOptionPane.showMessageDialog(this, "The 'price' to set cannot be 0.");
                return;  // Stop further processing if 'quantity' text field are empty
            }

            String updateProductQuery = "UPDATE products SET name = ?, price = ? WHERE id = ?";
            try (PreparedStatement updateProductStatement = connection.prepareStatement(updateProductQuery)) {
                // Set parameters in the prepared statement
                updateProductStatement.setString(1, updatedProductName);
                updateProductStatement.setDouble(2, updatedPrice);
                updateProductStatement.setInt(3, productID_toUpdate);

                // Execute the insert statement
                updateProductStatement.executeUpdate();

                resetTextFields();
                reloadProductsTable();

                updateProduct_ProductID_comboBox.setSelectedIndex(0);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Cameguing.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Cameguing.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_updateProduct_ButtonActionPerformed

    private void stockIn_ProductID_txtFldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stockIn_ProductID_txtFldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_stockIn_ProductID_txtFldActionPerformed

    private void stockIn_Quantity_txtFldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stockIn_Quantity_txtFldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_stockIn_Quantity_txtFldActionPerformed

    private void stockIn_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stockIn_ButtonActionPerformed
        try (Connection connection = establishConnection()) {

            int productID = 0;
            int quantity = 0;

            // Get data from text fields
            productID = stockIn_ProductID_comboBox.getSelectedIndex();
            String quantity_Str = stockIn_Quantity_txtFld.getText().trim();

            // Check if any of the required fields is empty
            if (productID == 0) {
                JOptionPane.showMessageDialog(this, "Please select a Product ID.");
                return;  // Stop further processing if fields are empty
            }

            // Check if any of the required fields is empty
            if (quantity_Str.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please fill in the 'quantity' text field.");
                return;  // Stop further processing if 'quantity' text field are empty
            }

            try {
                quantity = Integer.parseInt(quantity_Str);
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "Please fill in the 'quantity' text field with a valid integer.");
                return;
            }

            // Check if any of the required fields is empty
            if (quantity == 0) {
                JOptionPane.showMessageDialog(this, "The 'quantity' to order cannot be 0.");
                return;  // Stop further processing if 'quantity' text field are empty
            }

            String stockInQuery = "UPDATE stock SET quantity = quantity + ? WHERE products_id = ?";
            try (PreparedStatement stockInStatement = connection.prepareStatement(stockInQuery)) {
                // Set parameters in the prepared statement
                stockInStatement.setInt(1, quantity);
                stockInStatement.setInt(2, productID);

                // Execute the insert statement
                stockInStatement.executeUpdate();

                resetTextFields();
                reloadProductsTable();

                stockIn_ProductID_comboBox.setSelectedIndex(0);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Cameguing.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Cameguing.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_stockIn_ButtonActionPerformed

    private void createOrder_CustomerName_txtFldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createOrder_CustomerName_txtFldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_createOrder_CustomerName_txtFldActionPerformed

    private void createOrder_OrderDate_txtFldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createOrder_OrderDate_txtFldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_createOrder_OrderDate_txtFldActionPerformed

    private void createOrder_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createOrder_ButtonActionPerformed
        try (Connection connection = establishConnection()) {
            // Get data from text fields
            String customerName = createOrder_CustomerName_txtFld.getText().trim();

            // Check if auto date is enabled
            boolean isAutoDateToggled = AutoDate_ToggleButton.isSelected();

            java.sql.Timestamp orderDate = null;

            if (isAutoDateToggled) {
                // Set orderDate to current date and time
                orderDate = new java.sql.Timestamp(System.currentTimeMillis());
                createOrder_OrderDate_txtFld.setText(orderDate.toString());
            } else {
                // Auto date is not enabled, proceed with user input
                String orderDateStr = createOrder_OrderDate_txtFld.getText().trim();

                // Convert the orderDateStr to a Timestamp
                try {
                    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                    java.util.Date parsedDate = dateFormat.parse(orderDateStr + " 00:00:00");
                    orderDate = new java.sql.Timestamp(parsedDate.getTime());
                } catch (ParseException ex) {
                    StringBuilder message = new StringBuilder("");
                    message.append("Please fill in the 'Order Date' text field with the valid date time format:\n");
                    message.append("\n");
                    message.append("Sample Date Time: 2003-07-03 23:59:59\n");
                    message.append("\n");
                    message.append("NOTE: The 'Time' part of the format is optional, will be automatically filled with 00:00:00");

                    JOptionPane.showMessageDialog(this, message, "Invalid Date Time Format", JOptionPane.WARNING_MESSAGE);
                    return;
                }
            }

            // Check if any of the required fields is empty
            if (customerName.isEmpty() || createOrder_OrderDate_txtFld.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please fill in all text fields.");
                return;  // Stop further processing if fields are empty
            }

            String createOrderQuery = "INSERT INTO `order` (customer_name, order_date) VALUES (?, ?)";

            try (PreparedStatement createOrderStatement = connection.prepareStatement(createOrderQuery, Statement.RETURN_GENERATED_KEYS)) {

                // Set parameters in the prepared statement for product insertion
                createOrderStatement.setString(1, customerName);
                createOrderStatement.setTimestamp(2, orderDate);

                // Execute the insert statement
                createOrderStatement.executeUpdate();

                // Get the generated keys
                ResultSet generatedKeys = createOrderStatement.getGeneratedKeys();

                if (generatedKeys.next()) {
                    // Get the generated order ID
                    int orderId = generatedKeys.getInt(1);

                    OrderIDComboBox_Adding_OrderIDs();

                    // Setting the Selected Index to the Order ID
                    addOrder_OrderID_comboBox.setSelectedIndex(orderId);
                } else {
                    // Handle the case where no keys were generated
                    System.out.println("No generated keys were obtained.");
                }

                resetOrderDetailsTable();

                createOrder_CustomerName_txtFld.setEnabled(false);
                createOrder_OrderDate_txtFld.setEnabled(false);
                createOrder_Button.setEnabled(false);
                
                AutoDate_ToggleButton.setEnabled(false);

                viewOrders_Button.setEnabled(false);

                addOrder_OrderID_comboBox.setEnabled(false);
                addOrder_ProductID_comboBox.setEnabled(true);
                addOrder_Quantity_txtFld.setEnabled(true);
                addOrderItem_Button.setEnabled(true);

                addOrder_GrandTotal_DisplayOnly_txtFld.setText("");
                addOrder_GrandTotal_DisplayOnly_txtFld.setEnabled(false);

                createOrder_Customer_StillOrdering = true;

            }
        } catch (SQLException ex) {
            Logger.getLogger(Cameguing.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Cameguing.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_createOrder_ButtonActionPerformed

    private void addOrder_ProductID_txtFldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addOrder_ProductID_txtFldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addOrder_ProductID_txtFldActionPerformed

    private void addOrder_Quantity_txtFldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addOrder_Quantity_txtFldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addOrder_Quantity_txtFldActionPerformed

    private void addOrderItem_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addOrderItem_ButtonActionPerformed
        try (Connection connection = establishConnection()) {

            int productID = 0;
            int quantityOrdered = 0;

            // Get data from text fields
            int orderID = addOrder_OrderID_comboBox.getSelectedIndex();
            productID = addOrder_ProductID_comboBox.getSelectedIndex();
            String quantityOrdered_Str = addOrder_Quantity_txtFld.getText().trim();

            // Check if the user selected an ID
            if (productID == 0) {
                JOptionPane.showMessageDialog(this, "Please select a Product ID.");
                return;  // Stop further processing if fields are empty
            }

            // Check if any of the required fields is empty
            if (quantityOrdered_Str.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please fill in the 'quantity' text field.");
                return;  // Stop further processing if 'quantity' text field are empty
            }

            try {
                quantityOrdered = Integer.parseInt(quantityOrdered_Str);
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "Please fill in the 'quantity' text field with a valid integer.");
                return;
            }

            // Check if any of the required fields is empty
            if (quantityOrdered == 0) {
                JOptionPane.showMessageDialog(this, "The 'quantity' to order cannot be 0.");
                return;  // Stop further processing if 'quantity' text field are empty
            }

            // Check available stock
            int availableStock = getAvailableStock(connection, productID);
            if (quantityOrdered > availableStock) {
                // Show a message dialog indicating not enough stock
                JOptionPane.showMessageDialog(this, "Not enough stock available for the selected product.", "Insufficient Stock", JOptionPane.WARNING_MESSAGE);
                return; // Stop further processing
            }

            double unitPrice = 0.0; // Initialize unitPrice
            double productSubtotal = 0.0; // Initialize productSubtotal

            // Check if a product order already exists for the given product and order
            String checkExistingOrderQuery = "SELECT id, quantity, price FROM product_order WHERE order_id = ? AND products_id = ?";
            try (PreparedStatement checkExistingOrderStatement = connection.prepareStatement(checkExistingOrderQuery)) {
                checkExistingOrderStatement.setInt(1, orderID);
                checkExistingOrderStatement.setInt(2, productID);
                ResultSet existingOrderResultSet = checkExistingOrderStatement.executeQuery();

                if (existingOrderResultSet.next()) {
                    // If an order already exists, update the quantity and subtotal
                    int existingOrderID = existingOrderResultSet.getInt("id");
                    int existingQuantity = existingOrderResultSet.getInt("quantity");
                    double existingSubtotal = existingOrderResultSet.getDouble("price");

                    unitPrice = existingSubtotal / existingQuantity; // Calculate unitPrice
                    productSubtotal = unitPrice * (existingQuantity + quantityOrdered); // Calculate new productSubtotal

                    // Update the existing order with the new quantity and subtotal
                    String updateOrderQuery = "UPDATE product_order SET quantity = ?, price = ? WHERE id = ?";
                    try (PreparedStatement updateOrderStatement = connection.prepareStatement(updateOrderQuery)) {
                        updateOrderStatement.setInt(1, existingQuantity + quantityOrdered);
                        updateOrderStatement.setDouble(2, productSubtotal);
                        updateOrderStatement.setInt(3, existingOrderID);
                        updateOrderStatement.executeUpdate();

                        // Set the flag to true indicating that an order item has been added
                        addOrder_Atleast_OneItem_Ordered = true;
                    }

                    // Update the stock quantity
                    String stockOutQuery = "UPDATE stock SET quantity = quantity - ? WHERE products_id = ?";
                    try (PreparedStatement stockOutStatement = connection.prepareStatement(stockOutQuery)) {
                        // Set parameters in the prepared statement
                        stockOutStatement.setInt(1, quantityOrdered);
                        stockOutStatement.setInt(2, productID);

                        // Execute the update statement
                        stockOutStatement.executeUpdate();

                        reloadProductsTable();
                    }

                } else {
                    // If no order exists, calculate subtotal and insert a new order

                    // Retrieve product price from the database
                    String productPriceQuery = "SELECT price FROM products WHERE id = ?";
                    try (PreparedStatement productPriceStatement = connection.prepareStatement(productPriceQuery)) {
                        productPriceStatement.setInt(1, productID);
                        ResultSet priceResultSet = productPriceStatement.executeQuery();

                        // Check if there is a result (product exists)
                        if (priceResultSet.next()) {
                            unitPrice = priceResultSet.getDouble("price");
                            productSubtotal = unitPrice * quantityOrdered;
                        } else {
                            throw new SQLException("Product not found. Please enter a valid product ID.");
                        }
                    }

                    // Insert the order item into the database
                    String productOrderQuery = "INSERT INTO product_order (order_id, products_id, quantity, price) VALUES (?, ?, ?, ?)";
                    try (PreparedStatement productOrderStatement = connection.prepareStatement(productOrderQuery)) {
                        productOrderStatement.setInt(1, orderID);
                        productOrderStatement.setInt(2, productID);
                        productOrderStatement.setInt(3, quantityOrdered);
                        productOrderStatement.setDouble(4, productSubtotal);

                        // Execute the insert statement
                        productOrderStatement.executeUpdate();

                        // Set the flag to true indicating that an order item has been added
                        addOrder_Atleast_OneItem_Ordered = true;
                    }

                    // Update the stock quantity
                    String stockOutQuery = "UPDATE stock SET quantity = quantity - ? WHERE products_id = ?";
                    try (PreparedStatement stockOutStatement = connection.prepareStatement(stockOutQuery)) {
                        // Set parameters in the prepared statement
                        stockOutStatement.setInt(1, quantityOrdered);
                        stockOutStatement.setInt(2, productID);

                        // Execute the update statement
                        stockOutStatement.executeUpdate();

                        reloadProductsTable();
                    }
                }

                resetOrderDetailsTable();
                showOrderID_OrderDetailsTable(orderID);

                addOrder_ProductID_comboBox.setSelectedIndex(0);
                addOrder_Quantity_txtFld.setText("");

                if (addOrder_Atleast_OneItem_Ordered) {
                    // Enable the specified components
                    addOrder_GrandTotal_DisplayOnly_txtFld.setEnabled(true);
                    addOrder_CompleteOrder_Button.setEnabled(true);
                }

                // Calculate and display the Grand Total
                double grandTotal = calculateGrandTotal(orderID);
                addOrder_GrandTotal_DisplayOnly_txtFld.setText(String.valueOf(grandTotal));

            }
        } catch (SQLException | NumberFormatException ex) {
            Logger.getLogger(Cameguing.class.getName()).log(Level.SEVERE, null, ex);
            // Handle the exception as needed
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Cameguing.class.getName()).log(Level.SEVERE, null, ex);
            // Handle the exception as needed
        }
    }//GEN-LAST:event_addOrderItem_ButtonActionPerformed

    // Method to get available stock for a given product
    private int getAvailableStock(Connection connection, int productID) throws SQLException {
        int availableStock = 0;
        String stockQuery = "SELECT quantity FROM stock WHERE products_id = ?";
        try (PreparedStatement stockStatement = connection.prepareStatement(stockQuery)) {
            stockStatement.setInt(1, productID);
            ResultSet stockResultSet = stockStatement.executeQuery();
            if (stockResultSet.next()) {
                availableStock = stockResultSet.getInt("quantity");
            }
        }
        return availableStock;
    }

    private void resetDatabase_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetDatabase_ButtonActionPerformed
        // Display a confirmation dialog
        int response = JOptionPane.showConfirmDialog(this, "Are you sure you want to reset the database? This will delete all data.", "Confirmation", JOptionPane.YES_NO_OPTION);

        // Check the user's response
        if (response == JOptionPane.YES_OPTION) {
            try {
                resetTableData("stock");
                resetTableData("product_order");
                resetTableData("products");
                resetTableData("`order`");

                reloadProductsTable();
                reloadOrderTable();
                resetOrderDetailsTable();
                resetTextFields();

                addProduct_Atleast_OneItem_Added = false;
                ProductsTable_Atleast_OneItem_AvailableStock = false;
                createOrder_Customer_StillOrdering = false;

                createOrder_CustomerName_txtFld.setEnabled(false);
                createOrder_OrderDate_txtFld.setEnabled(false);
                createOrder_Button.setEnabled(false);
                
                AutoDate_ToggleButton.setEnabled(false);

                viewOrders_Button.setEnabled(false);

                addOrder_OrderID_comboBox.setEnabled(false);
                addOrder_ProductID_comboBox.setEnabled(false);
                addOrder_Quantity_txtFld.setEnabled(false);
                addOrderItem_Button.setEnabled(false);

                addOrder_GrandTotal_DisplayOnly_txtFld.setEnabled(false);
                addOrder_CompleteOrder_Button.setEnabled(false);

                updateProduct_ProductID_comboBox.setEnabled(false);
                updateProduct_ProductName_txtFld.setEnabled(false);
                updateProduct_Price_txtFld.setEnabled(false);
                updateProduct_Button.setEnabled(false);

                stockIn_ProductID_comboBox.setEnabled(false);
                stockIn_Quantity_txtFld.setEnabled(false);
                stockIn_Button.setEnabled(false);

                createOrder_CustomerName_txtFld.setEnabled(false);
                createOrder_OrderDate_txtFld.setEnabled(false);
                createOrder_Button.setEnabled(false);
                
                AutoDate_ToggleButton.setEnabled(false);

                updateProduct_ProductID_comboBox.removeAllItems();
                stockIn_ProductID_comboBox.removeAllItems();
                addOrder_OrderID_comboBox.removeAllItems();
                addOrder_ProductID_comboBox.removeAllItems();
                
                NoticePanel_DisplayMsg_WithButton.setVisible(false);

            } catch (Exception e) {
                e.printStackTrace();
                // Handle the exception as needed
            }
        } else {
            // User clicked "No" or closed the dialog
            // Handle accordingly (you may choose to do nothing in this case)
        }
    }//GEN-LAST:event_resetDatabase_ButtonActionPerformed

    private void viewOrders_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewOrders_ButtonActionPerformed
        try {
            int orderID = 0;
            
            // Get orderID from the text field
            orderID = addOrder_OrderID_comboBox.getSelectedIndex();

            // Check if the user selected an ID
            if (orderID == 0) {
                JOptionPane.showMessageDialog(this, "Please select an Order ID.");
                resetOrderDetailsTable();
                addOrder_GrandTotal_DisplayOnly_txtFld.setText("");
                addOrder_GrandTotal_DisplayOnly_txtFld.setEnabled(false);
                return;  // Stop further processing if fields are empty
            }

            // Resetting the Order Details Table
            resetOrderDetailsTable();

            // Call the method to show order details
            showOrderID_OrderDetailsTable(orderID);

            // Calculate and display the Grand Total
            double grandTotal = calculateGrandTotal(orderID);
            addOrder_GrandTotal_DisplayOnly_txtFld.setText(String.valueOf(grandTotal));
            addOrder_GrandTotal_DisplayOnly_txtFld.setEnabled(true);

        } catch (NumberFormatException ex) {
            // Handle the exception if the input is not a valid number
            JOptionPane.showMessageDialog(this, "Please enter a valid Order ID.");
        } catch (SQLException ex) {
            Logger.getLogger(Cameguing.class.getName()).log(Level.SEVERE, null, ex);
            // Handle the SQL exception as needed
        }
    }//GEN-LAST:event_viewOrders_ButtonActionPerformed

    // Method to calculate the Grand Total for a given order
    private double calculateGrandTotal(int orderID) throws SQLException {
        double grandTotal = 0.0;
        String subtotalQuery = "SELECT SUM(price) AS total FROM product_order WHERE order_id = ?";
        try (Connection connection = establishConnection(); PreparedStatement subtotalStatement = connection.prepareStatement(subtotalQuery)) {
            subtotalStatement.setInt(1, orderID);
            ResultSet subtotalResultSet = subtotalStatement.executeQuery();
            if (subtotalResultSet.next()) {
                grandTotal = subtotalResultSet.getDouble("total");
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Cameguing.class.getName()).log(Level.SEVERE, null, ex);
            // Handle the exception as needed
        }
        return grandTotal;
    }

    private void addOrder_GrandTotal_DisplayOnly_txtFldActionPerformed(java.awt.event.ActionEvent evt) {

    }

    private void addOrder_CompleteOrder_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addOrder_CompleteOrder_ButtonActionPerformed
        try {
            addOrder_Atleast_OneItem_Ordered = false;
            createOrder_Customer_StillOrdering = false;
            addOrder_GrandTotal_DisplayOnly_txtFld.setEnabled(false);
            addOrder_CompleteOrder_Button.setEnabled(false);

            viewOrders_Button.setEnabled(true);
            addOrder_OrderID_comboBox.setEnabled(true);
            
            addOrder_ProductID_comboBox.setEnabled(false);
            addOrder_Quantity_txtFld.setEnabled(false);
            addOrderItem_Button.setEnabled(false);

            reloadProductsTable();
            reloadOrderTable();
            resetOrderDetailsTable();
            resetTextFields();
            OrderIDComboBox_Adding_OrderIDs();
            
            // Get the state of the toggle button
            boolean isAutoDateToggled = AutoDate_ToggleButton.isSelected();

            if(isAutoDateToggled) {
                createOrder_OrderDate_txtFld.setText("System-Generated Local DateTime");
                createOrder_OrderDate_txtFld.setEnabled(false);
            } else {
                createOrder_OrderDate_txtFld.setText("");
                createOrder_OrderDate_txtFld.setEnabled(true);
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(Cameguing.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_addOrder_CompleteOrder_ButtonActionPerformed

    private void viewEmptyStocksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewEmptyStocksActionPerformed
        try (Connection connection = establishConnection()) {

            // Define the query to find products with empty stocks
            String findEmptyStocksQuery = "SELECT * FROM stock WHERE quantity = 0";

            // Execute the query to get products with empty stocks
            try (PreparedStatement preparedStatement = connection.prepareStatement(findEmptyStocksQuery);
                 ResultSet resultSet = preparedStatement.executeQuery()) {

                ArrayList<String> emptyStockRecords = new ArrayList<>();

                while (resultSet.next()) {
                    // Found a product with empty stock, update the text fields
                    int productId = resultSet.getInt("products_id");

                    // Fetch product details from the products table
                    String productDetailsQuery = "SELECT * FROM products WHERE id = ?";
                    try (PreparedStatement productDetailsStatement = connection.prepareStatement(productDetailsQuery)) {
                        productDetailsStatement.setInt(1, productId);

                        try (ResultSet productDetailsResultSet = productDetailsStatement.executeQuery()) {
                            if (productDetailsResultSet.next()) {
                                // Fetch product details
                                String productName = productDetailsResultSet.getString("name");
                                String price = productDetailsResultSet.getString("price");

                                // Append the information to the list
                                emptyStockRecords.add("Product ID: " + productId + "\n" +
                                        "   > Product Name: " + productName + "\n" +
                                        "   > Price: " + price + "\n" +
                                        "   > Stock Quantity: 0\n");
                            }
                        }
                    }
                }

                if (!emptyStockRecords.isEmpty()) {
                    // Multiple records found, show a message with the information

                    // Create a JTextArea to display the information
                    JTextArea textArea = new JTextArea();
                    textArea.setEditable(false);
                    textArea.setLineWrap(true);
                    textArea.setWrapStyleWord(true);

                    // Create a list of records
                    ArrayList<String> recordsList = new ArrayList<>(emptyStockRecords);

                    // Create a navigation index array
                    final int[] currentIndex = {0};

                    // Update the text area with the first record
                    textArea.setText(recordsList.get(currentIndex[0]));

                    // Create navigation buttons
                    JButton backButton = new JButton("Back");
                    JButton nextButton = new JButton("Next");

                    // Add action listeners to the buttons
                    backButton.addActionListener(e -> {
                        if (currentIndex[0] > 0) {
                            currentIndex[0]--;
                            textArea.setText(recordsList.get(currentIndex[0]));
                        }
                    });

                    nextButton.addActionListener(e -> {
                        if (currentIndex[0] < recordsList.size() - 1) {
                            currentIndex[0]++;
                            textArea.setText(recordsList.get(currentIndex[0]));
                        }
                    });

                    // Create a JPanel for buttons
                    JPanel buttonPanel = new JPanel();
                    buttonPanel.add(backButton);
                    buttonPanel.add(nextButton);

                    // Create a JScrollPane to make the text area scrollable
                    JScrollPane scrollPane = new JScrollPane(textArea);

                    // Create a JDialog to display the information
                    JDialog dialog = new JDialog(this, "Products with Empty Stocks", true);
                    dialog.setLayout(new BorderLayout());
                    dialog.add(scrollPane, BorderLayout.CENTER);
                    dialog.add(buttonPanel, BorderLayout.SOUTH);
                    dialog.setSize(250, 200);
                    dialog.setLocationRelativeTo(this);
                    dialog.setVisible(true);
                } else {
                    // No products with empty stocks found
                    JOptionPane.showMessageDialog(this, "No products found with empty stocks.");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle the exception appropriately (show a message to the user, log it, etc.)
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Cameguing.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "An error occurred: " + e.getMessage());
        }
    }//GEN-LAST:event_viewEmptyStocksActionPerformed

    private void AutoDate_ToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AutoDate_ToggleButtonActionPerformed
        // Get the state of the toggle button
        boolean isAutoDateToggled = AutoDate_ToggleButton.isSelected();

        if(isAutoDateToggled) {
            createOrder_OrderDate_txtFld.setText("System-Generated Local DateTime");
            createOrder_OrderDate_txtFld.setEnabled(false);
        } else {
            createOrder_OrderDate_txtFld.setText("");
            createOrder_OrderDate_txtFld.setEnabled(true);
        }
    }//GEN-LAST:event_AutoDate_ToggleButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Cameguing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Cameguing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Cameguing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Cameguing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Cameguing().setVisible(true);
                try {
                    NoticePanel_DisplayMsg_WithButton.setVisible(false);
                    reloadProductsTable();
                    reloadOrderTable();
                    resetOrderDetailsTable();
                    resetTextFields();
                } catch (SQLException ex) {
                    Logger.getLogger(Cameguing.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    private static Connection establishConnection() throws SQLException, ClassNotFoundException {
        return DriverManager.getConnection(URL, USER, PWD);
    }

    private void resetTableData(String tableName) throws SQLException, ClassNotFoundException {
        try (Connection connection = establishConnection()) {
            Statement statement = connection.createStatement();

            // Delete all data from the table
            String deleteDataQuery = "DELETE FROM " + tableName;
            statement.executeUpdate(deleteDataQuery);

            // Reset the auto-increment value
            String resetAutoIncrementQuery = "ALTER TABLE " + tableName + " AUTO_INCREMENT = 1";
            statement.executeUpdate(resetAutoIncrementQuery);

        } catch (SQLException e) {
            e.printStackTrace();
            // Handle the exception as needed
        }
    }

    private boolean addProduct_isDuplicateEntry(String productName) {
        try (Connection connection = establishConnection()) {
            String query = "SELECT * FROM products WHERE name = ?";
            try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
                preparedStatement.setString(1, productName);

                try (ResultSet resultSet = preparedStatement.executeQuery()) {
                    if (resultSet.next()) {
                        // If a record is found, display existing data and return true
                        addProduct_displayExistingRecordData(resultSet);
                        return true;
                    }
                }
            }
        } catch (SQLException | ClassNotFoundException e) {
            e.printStackTrace();  // Handle the exception appropriately (log it, show a message, etc.)
        }
        return false;
    }

    private void addProduct_displayExistingRecordData(ResultSet resultSet) throws SQLException, ClassNotFoundException {
        // Display existing record data in a formatted message
        StringBuilder message = new StringBuilder("");

        message.append("Existing Product:\n");
        message.append("   > Product ID: ").append(resultSet.getString("id")).append("\n");
        message.append("   > Product Name: ").append(resultSet.getString("name")).append("\n");
        message.append("   > Price: ").append(resultSet.getString("price")).append("\n");

        // Get available stock for the existing product
        int productID = resultSet.getInt("id");
        int availableStock = getAvailableStock(establishConnection(), productID);

        message.append("   > Available Stock: ").append(availableStock).append("\n");

        JOptionPane.showMessageDialog(this, message.toString(), "Duplicate Entry Found", JOptionPane.WARNING_MESSAGE);
    }

    public static void resetTextFields() {
        addProduct_ProductName_txtFld.setText("");
        addProduct_Price_txtFld.setText("");

        updateProduct_ProductName_txtFld.setText("");
        updateProduct_Price_txtFld.setText("");

        stockIn_Quantity_txtFld.setText("");

        createOrder_CustomerName_txtFld.setText("");
        createOrder_OrderDate_txtFld.setText("");

        addOrder_Quantity_txtFld.setText("");
        addOrder_GrandTotal_DisplayOnly_txtFld.setText("");
    }

    public static void reloadProductsTable() throws SQLException {
        DefaultTableModel model = (DefaultTableModel) productsTable.getModel();
        model.setRowCount(0);  // Setting it to 0 rows
        boolean DatabaseSystem_hasEmptyStocks = false;

        try (Connection connection = establishConnection(); Statement statement = connection.createStatement()) {

            ResultSet resultSet = statement.executeQuery("SELECT * FROM products");

            ProductsTable_Atleast_OneItem_AvailableStock = false;

            while (resultSet.next()) {
                addProduct_Atleast_OneItem_Added = true;

                int product_id = resultSet.getInt(1);
                String productName = resultSet.getString(2);
                Double price = resultSet.getDouble(3);

                // Retrieve quantity for the current product from the stock table
                int quantity = getQuantityFromStock(connection, product_id);

                // If quantity is zero, skip to the next iteration
                if (quantity == 0) {
                    DatabaseSystem_hasEmptyStocks = true;
                    NoticePanel_DisplayMsg_WithButton.setVisible(true);
                    continue;
                }
                
                if(!DatabaseSystem_hasEmptyStocks) {
                    NoticePanel_DisplayMsg_WithButton.setVisible(false);
                }
                
                ProductsTable_Atleast_OneItem_AvailableStock = true;

                model.addRow(new Object[]{product_id, productName, price, quantity});
            }

            if (addProduct_Atleast_OneItem_Added) {
                // Enable the specified components
                updateProduct_ProductID_comboBox.setEnabled(true);
                updateProduct_ProductName_txtFld.setEnabled(true);
                updateProduct_Price_txtFld.setEnabled(true);
                updateProduct_Button.setEnabled(true);

                stockIn_ProductID_comboBox.setEnabled(true);
                stockIn_Quantity_txtFld.setEnabled(true);
                stockIn_Button.setEnabled(true);

                ProductIDComboBoxes_Adding_ProductIDs_ProductNames();
            }

            if (ProductsTable_Atleast_OneItem_AvailableStock && !createOrder_Customer_StillOrdering) {
                // Enable the specified components
                createOrder_CustomerName_txtFld.setEnabled(true);
                createOrder_Button.setEnabled(true);
                
                AutoDate_ToggleButton.setEnabled(true);
            
                // Get the state of the toggle button
                boolean isAutoDateToggled = AutoDate_ToggleButton.isSelected();

                if(isAutoDateToggled) {
                    createOrder_OrderDate_txtFld.setText("System-Generated Local DateTime");
                    createOrder_OrderDate_txtFld.setEnabled(false);
                } else {
                    createOrder_OrderDate_txtFld.setText("");
                    createOrder_OrderDate_txtFld.setEnabled(true);
                }
            }

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Cameguing.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // Method to retrieve quantity from the stock table
    private static int getQuantityFromStock(Connection connection, int productId) throws SQLException {
        try (Statement statement = connection.createStatement(); ResultSet resultSet = statement.executeQuery("SELECT quantity FROM stock WHERE products_id = " + productId)) {
            if (resultSet.next()) {
                return resultSet.getInt(1);
            }
        }
        return 0;  // Default to 0 if quantity is not found
    }

    public static void reloadOrderTable() throws SQLException {
        DefaultTableModel model = (DefaultTableModel) orderTable.getModel();
        model.setRowCount(0);  // Setting it to 0 rows

        try (Connection connection = establishConnection(); Statement statement = connection.createStatement()) {

            ResultSet resultSet = statement.executeQuery("SELECT * FROM `order`");

            while (resultSet.next()) {
                OrderIDComboBox_Adding_OrderIDs();
                addOrder_OrderID_comboBox.setEnabled(true);
                viewOrders_Button.setEnabled(true);
                
                int order_id = resultSet.getInt(1);
                String customerName = resultSet.getString(2);
                String order_date = resultSet.getString(3);

                model.addRow(new Object[]{order_id, customerName, order_date});
            }

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Cameguing.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public static void resetOrderDetailsTable() throws SQLException {
        DefaultTableModel model = (DefaultTableModel) orderDetailsTable.getModel();
        model.setRowCount(0);  // Setting it to 0 rows first
    }

    public static void showOrderID_OrderDetailsTable(int orderID) throws SQLException {
        try (Connection connection = establishConnection()) {

            // Retrieve order items with product details from the product_order and products tables
            String productOrderQuery = "SELECT po.products_id, p.name AS product_name, po.quantity, po.price, p.price AS unit_price FROM product_order po " +
                                       "JOIN products p ON po.products_id = p.id " +
                                       "WHERE po.order_id = ?";
            try (PreparedStatement productOrderStatement = connection.prepareStatement(productOrderQuery)) {
                productOrderStatement.setInt(1, orderID);
                ResultSet orderItemsResultSet = productOrderStatement.executeQuery();

                // Add or update the order items in the table
                DefaultTableModel model = (DefaultTableModel) orderDetailsTable.getModel();

                while (orderItemsResultSet.next()) {
                    int productID = orderItemsResultSet.getInt("products_id");
                    String productName = orderItemsResultSet.getString("product_name");
                    int quantityOrdered = orderItemsResultSet.getInt("quantity");
                    double productSubtotal = orderItemsResultSet.getDouble("price");
                    double unitPrice = orderItemsResultSet.getDouble("unit_price");

                    model.addRow(new Object[]{orderID, productID, productName, unitPrice, quantityOrdered, productSubtotal});
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(Cameguing.class.getName()).log(Level.SEVERE, null, ex);
            // Handle the exception as needed
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Cameguing.class.getName()).log(Level.SEVERE, null, ex);
            // Handle the exception as needed
        }
    }

    public static void ProductIDComboBoxes_Adding_ProductIDs_ProductNames() throws SQLException {
        try (Connection connection = establishConnection()) {
            // Your database logic here

            Statement statement;
            statement = connection.createStatement();

            ResultSet resultSet;
            resultSet = statement.executeQuery("SELECT id, name FROM products");

            updateProduct_ProductID_comboBox.removeAllItems();
            updateProduct_ProductID_comboBox.addItem("Select a Product ID");

            stockIn_ProductID_comboBox.removeAllItems();
            stockIn_ProductID_comboBox.addItem("Select a Product ID");

            addOrder_ProductID_comboBox.removeAllItems();
            addOrder_ProductID_comboBox.addItem("Select a Product ID");

            while (resultSet.next()) {
                String productID = resultSet.getString(1).toUpperCase();
                String productName = resultSet.getString(2);
                updateProduct_ProductID_comboBox.addItem(productID + "  |  " + productName);
                stockIn_ProductID_comboBox.addItem(productID + "  |  " + productName);
                addOrder_ProductID_comboBox.addItem(productID + "  |  " + productName);
            }

        } catch (SQLException | ClassNotFoundException e) {
            e.printStackTrace();
            // Handle the exception appropriately (show a message to the user, log it, etc.)
        }
    }

    public static void OrderIDComboBox_Adding_OrderIDs() throws SQLException {
        try (Connection connection = establishConnection()) {
            // Your database logic here

            Statement statement;
            statement = connection.createStatement();

            ResultSet resultSet;
            resultSet = statement.executeQuery("SELECT id, customer_name FROM `order`");

            addOrder_OrderID_comboBox.removeAllItems();
            addOrder_OrderID_comboBox.addItem("Select an Order ID");

            while (resultSet.next()) {
                String orderID = resultSet.getString(1).toUpperCase();
                String customerName = resultSet.getString(2);
                addOrder_OrderID_comboBox.addItem(orderID + "  |  " + customerName);
            }

        } catch (SQLException | ClassNotFoundException e) {
            e.printStackTrace();
            // Handle the exception appropriately (show a message to the user, log it, etc.)
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JToggleButton AutoDate_ToggleButton;
    private static javax.swing.JPanel NoticePanel_DisplayMsg_WithButton;
    private static javax.swing.JButton addOrderItem_Button;
    private javax.swing.JButton addOrder_CompleteOrder_Button;
    private static javax.swing.JTextField addOrder_GrandTotal_DisplayOnly_txtFld;
    private static javax.swing.JComboBox<String> addOrder_OrderID_comboBox;
    private static javax.swing.JComboBox<String> addOrder_ProductID_comboBox;
    private static javax.swing.JTextField addOrder_Quantity_txtFld;
    private javax.swing.JButton addProduct_Button;
    private static javax.swing.JTextField addProduct_Price_txtFld;
    private static javax.swing.JTextField addProduct_ProductName_txtFld;
    private static javax.swing.JButton createOrder_Button;
    private static javax.swing.JTextField createOrder_CustomerName_txtFld;
    private static javax.swing.JTextField createOrder_OrderDate_txtFld;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private static javax.swing.JTable orderDetailsTable;
    private static javax.swing.JTable orderTable;
    private static javax.swing.JTable productsTable;
    private javax.swing.JButton resetDatabase_Button;
    private static javax.swing.JButton stockIn_Button;
    private static javax.swing.JComboBox<String> stockIn_ProductID_comboBox;
    private static javax.swing.JTextField stockIn_Quantity_txtFld;
    private static javax.swing.JButton updateProduct_Button;
    private static javax.swing.JTextField updateProduct_Price_txtFld;
    private static javax.swing.JComboBox<String> updateProduct_ProductID_comboBox;
    private static javax.swing.JTextField updateProduct_ProductName_txtFld;
    private static javax.swing.JButton viewEmptyStocks;
    private static javax.swing.JButton viewOrders_Button;
    // End of variables declaration//GEN-END:variables
}
